""" This test verifies the base bmap creation and copying API functionality. It
generates a random sparse file, then creates a bmap fir this file and copies it
to a different file using the bmap. Then it compares the original random sparse
file and the copy and verifies that they are identical. """

# Disable the following pylint recommendations:
#   *  Too many instance attributes - R0902
#   *  Too many public methods - R0904
# pylint: disable=R0902,R0904

import tempfile
import filecmp
import unittest
import itertools

import tests.helpers
from bmaptools import BmapCreate, BmapCopy, Fiemap

class Error(Exception):
    """ A class for exceptions generated by this test. """
    pass

def compare_holes(file1, file2):
    """ Make sure that files 'file1' and 'file2' have holes at the same places.
    The 'file1' and 'file2' arguments may be full file paths or file
    objects. """

    fiemap1 = Fiemap.Fiemap(file1)
    fiemap2 = Fiemap.Fiemap(file2)

    iterator1 = fiemap1.get_unmapped_ranges(0, fiemap1.blocks_cnt)
    iterator2 = fiemap2.get_unmapped_ranges(0, fiemap2.blocks_cnt)

    iterator = itertools.izip_longest(iterator1, iterator2)
    for range1, range2 in iterator:
        if range1 != range2:
            raise Error("mismatch for hole %d-%d, it is %d-%d in file2" \
                        % (range1[0], range1[1], range2[0], range2[1]))

class TestCreateCopy(unittest.TestCase):
    """" A basic test for the bmap creation and copying functionality. It first
    generates a bmap for a sparse file, and then copies the sparse file to a
    different file, and then checks that all the blocks were copied. The
    original sparse file is generated randomly. The test entry point is the
    'test()' method. """

    def _do_test(self, f_image):
        """ Run the test for the 'f_image' file object. """

        # Create and open a temporary file for a copy of the copy
        f_copy = tempfile.NamedTemporaryFile("wb+")

        # Create and open 2 temporary files for the bmap
        f_bmap1 = tempfile.NamedTemporaryFile("w+")
        f_bmap2 = tempfile.NamedTemporaryFile("w+")

        #
        # Pass 1: generate the bmap, copy and compare
        #

        # Create bmap for the random sparse file
        creator = BmapCreate.BmapCreate(f_image.name, f_bmap1.name)
        creator.generate()

        # Copy the random sparse file to a different file using bmap
        writer = BmapCopy.BmapCopy(f_image.name, f_copy.name, f_bmap1.name)
        writer.copy(False, True)

        # Compare the original file and the copy are identical
        assert filecmp.cmp(f_image.name, f_copy.name, False)
        # Make sure that holes in the copy are identical to holes in the random
        # sparse file.
        compare_holes(f_image.name, f_copy.name)

        #
        # Pass 2: same as pass 1, but use file objects instead of paths
        #

        creator = BmapCreate.BmapCreate(f_image, f_bmap2)
        creator.generate()

        writer = BmapCopy.BmapCopy(f_image, f_copy, f_bmap2)
        writer.copy(False, True)

        assert filecmp.cmp(f_image.name, f_copy.name, False)
        compare_holes(f_image, f_copy)

        # Make sure the bmap files generated at pass 1 and pass 2 are identical
        assert filecmp.cmp(f_bmap1.name, f_bmap2.name, False)

        #
        # Pass 3: repeat pass 2 to make sure the same 'BmapCreate' and
        # 'BmapCopy' objects can be used more than once.
        #
        f_bmap2.seek(0)
        creator.generate()
        f_bmap2.seek(0)
        creator.generate()
        writer.copy(True, False)
        writer.copy(False, True)
        writer.sync()
        assert filecmp.cmp(f_image.name, f_copy.name, False)
        compare_holes(f_image, f_copy)
        assert filecmp.cmp(f_bmap1.name, f_bmap2.name, False)

        #
        # Pass 4: copy the sparse file without bmap and make sure it is
        # identical to the original file
        #
        writer = BmapCopy.BmapCopy(f_image, f_copy.name)
        writer.copy(True, True)
        assert filecmp.cmp(f_image.name, f_copy.name, False)

        writer = BmapCopy.BmapCopy(f_image, f_copy)
        writer.copy(False, True)
        assert filecmp.cmp(f_image.name, f_copy.name, False)

        # Close temporary files, which will also remove them
        f_copy.close()
        f_bmap1.close()
        f_bmap2.close()

    def test(self):

        # Create and open a temporary file for the image
        f_image = tempfile.NamedTemporaryFile("wb+")

        # Create a 8MiB random sparse file
        size = 8 * 1024 * 1024
        tests.helpers.create_random_sparse_file(f_image, size)

        # Execute the test on this file
        self._do_test(f_image)

        # Do the same for random sparse files of size 8MiB +/- 1 byte
        tests.helpers.create_random_sparse_file(f_image, size + 1)
        self._do_test(f_image)

        tests.helpers.create_random_sparse_file(f_image, size - 1)
        self._do_test(f_image)

        f_image.close()
