Summary
~~~~~~~

The bmap-tools project implements bmap-related tools and API modules. The
entire project is written in python, and requires python 2.7+.

Currently the main user of this project is Tizen IVI, but the project is
generic and can be used everywhere, when dealing with raw images.

The project author and maintainer is Artem Bityutskiy <dedekind1@gmail.com>.
Please, feel free to contact me if you have questions.

The project is documented here:
https://source.tizen.org/documentation/reference/bmaptool

The project mailing list is (no need to subscribe to post there):
bmap-tools@lists.infradead.org

Mailing list archives:
http://lists.infradead.org/pipermail/bmap-tools/

Subscribe here:
http://lists.infradead.org/mailman/listinfo/bmap-tools

The project git is here:
https://github.com/01org/bmap-tools.git

Signed release tarballs are available here:
ftp://ftp.infradead.org/pub/bmap-tools/

Packages for various distributions are available here:
* The latest release: http://download.tizen.org/tools/latest-release/
* The latest pre-release: http://download.tizen.org/tools/pre-release/
* Older releases: http://download.tizen.org/tools/archive

Please, contribute by sending patches to the mailing list, feel free to CC
me: Artem Bityutskiy <dedekind1@gmail.com>

The project structure
~~~~~~~~~~~~~~~~~~~~~

--------------------------------------------------------------------------------
| - bmaptool             | A tools to create bmap and copy with bmap. Based    |
|                        | on the 'BmapCreate.py' and 'BmapCopy.py' modules.   |
| - setup.py             | A script to turn the entire bmap-tools project      |
|                        | into a python egg.                                  |
| - setup.cfg            | contains a piece of nose tests configuration        |
| - .coveragerc          | lists files to include into test coverage report    |
| - TODO                 | Just a list of things to be done for the project.   |
| - make_a_release.sh    | Most people may ignore this script. It is used by   |
|                        | maintainer when creating a new release.             |
| - tests/               | Contains the project unit-tests.                    |
|   | - test_api_base.py | Tests the base API modules: 'BmapCreate.py' and     |
|   |                    | 'BmapCopy.py'.                                      |
|   | - test_filemap.py  | Tests the 'Filemap.py' module.                      |
|   | - test_compat.py   | Tests that new BmapCopy implementations support old |
|   |                    | bmap formats, and old BmapCopy implementations      |
|   |                    | support new compatible bmap fomrats.                |
|   | - helpers.py       | Helper functions shared between the unit-tests.     |
|   | - test-data/       | Data files for the unit-tests                       |
|   | - oldcodebase/     | Copies of old BmapCopy implementations for bmap     |
|   |                    | format forward-compatibility verification.          |
| - bmaptools/           | The API modules which implement all the bmap        |
|   |                    | functionality.                                      |
|   | - BmapCreate.py    | Creates a bmap for a given file.                    |
|   | - BmapCopy.py      | Implements copying of an image using its bmap.      |
|   | - Filemap.py       | Allows for reading files' block map.                |
|   | - BmapHelpers.py   | Just helper functions used all over the project.    |
|   | - TransRead.py     | Provides a transparent way to read various kind of  |
|   |                    | files (compressed, etc)                             |
| - debian/*             | Debian packaging for the project.                   |
| - packaging/*          | RPM packaging (Fedora & OpenSuse) for the project.  |
| - contrib/*            | Various contributions that may be useful, but       |
|                        | project maintainers do not really test or maintain. |
--------------------------------------------------------------------------------

How to run unit tests
~~~~~~~~~~~~~~~~~~~~~

Just install the 'nose' python test framework and run the 'nosetests' command in
the project root directory. If you want to see tests coverage report, run
'nosetests --with-coverage'.

Credits
~~~~~~~

* Ed Bartosh <eduard.bartosh@intel.com> for helping me with learning python
  (this is my first python project) and working with the Tizen IVI
  infrastructure. Ed also implemented the packaging.
* Alexander Kanevskiy <alexander.kanevskiy@intel.com> and
  Kevin Wang <kevin.a.wang@intel.com> for helping with integrating this stuff
  to the Tizen IVI infrastructure.
* Simon McVittie <simon.mcvittie@collabora.co.uk> for improving Debian
  packaging and fixing bmaptool.
